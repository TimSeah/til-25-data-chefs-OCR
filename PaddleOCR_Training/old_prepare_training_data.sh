#!/bin/bash

# This script prepares data for PaddleOCR training.
# Assumes it's run from /home/jupyter/PaddleOCR_Training/

# Exit on any error
set -e

# --- Configuration ---
# Base directory for the raw image and HOCR data
RAW_DATA_BASE_DIR="/home/jupyter/advanced/ocr" # Assuming images and HOCR are here
IMAGE_DIR="${RAW_DATA_BASE_DIR}"
HOCR_DIR="${RAW_DATA_BASE_DIR}" # Or a specific subdirectory if HOCRs are separate

# Base directory for OCR outputs (training labels, dicts)
OCR_OUTPUT_DIR="/home/jupyter/PaddleOCR_Training/ocr_output"
SCRIPTS_DIR="/home/jupyter/PaddleOCR_Training/scripts" # Where your Python helper scripts are

# Path to the CSV file generated by data_preprocess.py
LINE_LABELS_CSV="${OCR_OUTPUT_DIR}/line_labels.csv"

# Path for the generated character dictionary
CHAR_DICT_FILE="${OCR_OUTPUT_DIR}/custom_char_dict.txt"

# --- Script Execution ---

echo "--- Running Data Preprocessing (HOCR to Line Labels CSV) ---"
# Call data_preprocess.py with the required arguments
python "${SCRIPTS_DIR}/../data_preprocess.py" \
    "$IMAGE_DIR" \
    "$HOCR_DIR" \
    "$LINE_LABELS_CSV"
# Note: Assuming data_preprocess.py is one level up from SCRIPTS_DIR, in the main PaddleOCR_Training dir.
# If data_preprocess.py is in SCRIPTS_DIR, change the path to:
# python3 "${SCRIPTS_DIR}/data_preprocess.py" ...

if [ ! -f "$LINE_LABELS_CSV" ]; then
    echo "Error: data_preprocess.py did not create $LINE_LABELS_CSV. Exiting."
    exit 1
fi
echo "data_preprocess.py completed. Output CSV: $LINE_LABELS_CSV"
echo ""

echo "--- Calculating Maximum Text Length ---"
# get_max_length.py captures its output to a variable
MAX_TEXT_LENGTH=$(python3 "${SCRIPTS_DIR}/get_max_length.py" "$LINE_LABELS_CSV")
if [ -z "$MAX_TEXT_LENGTH" ] || [ "$MAX_TEXT_LENGTH" -lt "0" ]; then
    echo "Error: Failed to get max text length or invalid value received: '$MAX_TEXT_LENGTH'. Exiting."
    exit 1
fi
echo "Maximum text length found: $MAX_TEXT_LENGTH"
echo ""

echo "--- Generating Character Dictionary ---"
python "${SCRIPTS_DIR}/generate_char_dict.py" "$LINE_LABELS_CSV" "$CHAR_DICT_FILE"
if [ ! -f "$CHAR_DICT_FILE" ]; then
    echo "Error: generate_char_dict.py did not create $CHAR_DICT_FILE. Exiting."
    exit 1
fi
echo "Character dictionary created: $CHAR_DICT_FILE"
echo ""

echo "--- Converting CSV to PaddleOCR Label Format ---"
python "${SCRIPTS_DIR}/convert_csv_to_paddle_labels.py" \
    "$LINE_LABELS_CSV" \
    "$OCR_OUTPUT_DIR" \
    --char_dict "$CHAR_DICT_FILE"
echo ""

echo "--- Data Preparation for PaddleOCR Training Complete ---"
echo "Outputs are in: $OCR_OUTPUT_DIR"
echo "Key files created:"
echo "  - Character Dictionary: $CHAR_DICT_FILE"
echo "  - Training Labels: ${OCR_OUTPUT_DIR}/rec_gt_train.txt"
echo "  - Evaluation Labels: ${OCR_OUTPUT_DIR}/rec_gt_eval.txt"
echo "  - Maximum Text Length: $MAX_TEXT_LENGTH"
echo ""
echo "Next steps:"
echo "1. Review the generated files, especially custom_char_dict.txt."
echo "2. Update your PaddleOCR training configuration YAML file with:"
echo "   - The correct path to custom_char_dict.txt: $CHAR_DICT_FILE"
echo "   - The correct paths to training data: ${OCR_OUTPUT_DIR}/rec_gt_train.txt"
echo "   - The correct paths to evaluation data: ${OCR_OUTPUT_DIR}/rec_gt_eval.txt"
echo "   - The 'max_text_length': $MAX_TEXT_LENGTH"
echo "3. Ensure the custom_char_dict.txt used for training is the same one copied to"
echo "   /opt/paddleocr_models/dicts/custom_char_dict.txt in your Docker image for inference."
